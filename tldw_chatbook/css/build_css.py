#!/usr/bin/env python3
"""
CSS Build Script for tldw_chatbook
Concatenates modular CSS files into a single file for Textual
"""

import os
from pathlib import Path
from datetime import datetime

# Define the order of imports (based on dependencies)
CSS_MODULES = [
    # 1. Core - Foundation (no dependencies)
    "core/_variables.tcss",
    "core/_reset.tcss",
    "core/_base.tcss", 
    "core/_typography.tcss",
    
    # 2. Layout - Structure (depends on core)
    "layout/_windows.tcss",
    "layout/_tabs.tcss",
    "layout/_sidebars.tcss",
    "layout/_panes.tcss",
    "layout/_containers.tcss",
    
    # 3. Components - Reusable UI (depends on core + layout)
    "components/_buttons.tcss",
    "components/_forms.tcss",
    "components/_lists.tcss",
    "components/_navigation.tcss",
    "components/_messages.tcss",
    "components/_dialogs.tcss",
    "components/_status.tcss",
    "components/_widgets.tcss",
    "components/stats_screen.css",
    "components/splash_viewer.css",
    
    # 4. Features - Application Specific (depends on all above)
    "features/_chat.tcss",
    "features/_chat_tabs.tcss",
    "features/_conversations.tcss",
    "features/_notes.tcss",
    "features/_media.tcss",
    "features/_search-rag.tcss",
    "features/_llm-management.tcss",
    "features/_tools-settings.tcss",
    "features/_ingest.tcss",
    "features/_ingest_tldw_api_tabs.tcss",
    "features/_evaluation_v2.tcss",
    "features/_metrics.tcss",
    "features/_embeddings.tcss",
    "features/_splash.tcss",
    "features/_wizards.tcss",
    "features/_chatbooks.tcss",
    "features/_coding.tcss",
    "features/_tab_dropdown.tcss",
    
    # 5. Utilities - Helpers and Overrides (can override anything)
    "utilities/_helpers.tcss",
    "utilities/_states.tcss",
    "utilities/_overrides.tcss",
]

def build_css(css_dir: Path, output_file: Path):
    """Concatenate all CSS modules into a single file."""
    
    # Header for the generated file
    header = f"""/* ========================================
 * GENERATED FILE - DO NOT EDIT DIRECTLY
 * ======================================== 
 * Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
 * 
 * This file is automatically generated by build_css.py
 * Edit the individual module files in core/, layout/, 
 * components/, features/, and utilities/ directories
 * ======================================== */

"""
    
    # Collect all CSS content
    combined_css = [header]
    
    for module in CSS_MODULES:
        module_path = css_dir / module
        
        if module_path.exists():
            print(f"‚úì Processing: {module}")
            with open(module_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
                # Add module separator
                combined_css.append(f"\n/* ===== MODULE: {module} ===== */\n")
                combined_css.append(content)
                
                # Ensure there's a newline at the end
                if not content.endswith('\n'):
                    combined_css.append('\n')
        else:
            print(f"‚ö† Missing module: {module}")
            # Add placeholder comment
            combined_css.append(f"\n/* ===== MODULE: {module} (NOT FOUND) ===== */\n")
    
    # Write the combined CSS
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(''.join(combined_css))
    
    print(f"\n‚úÖ CSS build complete: {output_file}")
    print(f"üìè Total size: {len(''.join(combined_css)):,} characters")

def main():
    """Main entry point."""
    # Get the CSS directory (where this script is located)
    css_dir = Path(__file__).parent
    
    # Output file
    output_file = css_dir / "tldw_cli_modular.tcss"
    
    # Build the CSS
    build_css(css_dir, output_file)
    
    print("\nTo use the modular CSS:")
    print("1. Update app.py to use 'tldw_cli_modular.tcss'")
    print("2. Run this script whenever you modify any module files")

if __name__ == "__main__":
    main()