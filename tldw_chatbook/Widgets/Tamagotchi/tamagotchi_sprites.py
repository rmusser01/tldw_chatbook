"""
Sprite Management System for Tamagotchi

Handles visual representations including ASCII art and emoji sprites.
"""

from typing import Dict, List, Optional
import random


class SpriteManager:
    """
    Manages visual representations of the tamagotchi.
    
    Provides both emoji and ASCII art sprites with animation support.
    """
    
    # Default emoji sprites for different moods
    EMOJI_SPRITES: Dict[str, List[str]] = {
        'happy': ['üòä', 'üòÑ', 'ü•∞', 'üòÉ', 'ü§ó'],
        'neutral': ['üòê', 'üôÇ', 'üòë', 'üò∂', 'ü§î'],
        'sad': ['üò¢', 'üò≠', 'üòû', 'üòî', '‚òπÔ∏è'],
        'very_sad': ['üò∞', 'üò•', 'üòø', 'üíî', 'üòñ'],
        'hungry': ['üòã', 'ü§§', 'üò´', 'ü•∫', 'üò©'],
        'sleepy': ['üò¥', 'üò™', 'ü•±', 'üí§', 'üòå'],
        'sick': ['ü§¢', 'ü§í', 'üò∑', 'ü§ß', 'ü§ï'],
        'dead': ['üíÄ', 'üëª', '‚ö∞Ô∏è', 'ü™¶', '‚ò†Ô∏è'],
        'baby': ['ü•ö', 'üê£', 'üê•', 'üê§', 'üçº'],
        'teen': ['üê¶', 'ü¶Ü', 'üêß', 'ü¶ú', 'ü¶Ö'],
        'adult': ['üêì', 'ü¶Ö', 'ü¶ú', 'ü¶ö', 'ü¶â'],
        'excited': ['ü§©', 'ü•≥', 'üéâ', '‚ú®', 'üåü'],
        'angry': ['üò†', 'üò°', 'ü§¨', 'üëø', 'üí¢'],
        'love': ['üòç', 'ü•∞', 'üíï', 'üíñ', 'üíó']
    }
    
    # ASCII art sprites for terminal compatibility
    ASCII_SPRITES: Dict[str, List[str]] = {
        'happy': [
            "^_^",
            "^o^",
            "(‚óï‚Äø‚óï)",
            "(Àò‚ñæÀò)",
            "(ÔΩ°‚óï‚Äø‚óïÔΩ°)"
        ],
        'neutral': [
            "-_-",
            "o_o",
            "(._.|",
            ":|",
            "‚Ä¢_‚Ä¢"
        ],
        'sad': [
            "T_T",
            ";_;",
            "(‚ï•Ôπè‚ï•)",
            ":'(",
            "Q_Q"
        ],
        'very_sad': [
            "(T‚åìT)",
            "ÔΩ°ÔΩ•ÔæüÔæüÔΩ•(>_<)ÔΩ•ÔæüÔæüÔΩ•ÔΩ°",
            "(‡≤•Ôπè‡≤•)",
            "(„Å£ÀòÃ©‚ï≠‚ïÆÀòÃ©)„Å£",
            "(._.)"
        ],
        'hungry': [
            "@_@",
            "*o*",
            "(ÔΩ°‚óï‚Äø‚óïÔΩ°)",
            "(¬∞o¬∞)",
            "(*Ôø£‚ñΩÔø£)"
        ],
        'sleepy': [
            "u_u",
            "-.-",
            "(ÔºçœâÔºç) zzZ",
            "(-_-) zzZ",
            "(ÀòœâÀò)"
        ],
        'sick': [
            "x_x",
            "+_+",
            "(√óÔπè√ó)",
            "(*_*)",
            "@_@"
        ],
        'dead': [
            "X_X",
            "‚úù_‚úù",
            "(‚úñ‚ï≠‚ïÆ‚úñ)",
            "x.x",
            "[*_*]"
        ],
        'excited': [
            "\\(^o^)/",
            "Ôºº(‚óéo‚óé)Ôºè",
            "„ÉΩ(¬¥‚ñΩ`)/",
            "Ôºº(‚òÖ^‚àÄ^‚òÖ)Ôºè",
            "‚ï∞(*¬∞‚ñΩ¬∞*)‚ïØ"
        ],
        'angry': [
            ">_<",
            "(‚ï¨‡≤†Áõä‡≤†)",
            "„ÉΩ(`‚åí¬¥)Ôæâ",
            "(ÔΩÄŒµ¬¥)",
            "(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØ"
        ],
        'love': [
            "‚ô•‚Äø‚ô•",
            "(‚ô•œâ‚ô•)",
            "(¬¥‚àÄÔΩÄ)‚ô°",
            "(*‚ô•‚Äø‚ô•*)",
            "‚ô•(ÀÜ‚å£ÀÜ‘Ö)"
        ]
    }
    
    # Animation sequences for actions
    ANIMATIONS: Dict[str, List[str]] = {
        'eating': ['üòê', 'üòÆ', 'üòã', 'üòä'],
        'bounce': ['üòä', 'üôÉ', 'üòä', 'üôÉ'],
        'spin': ['üòä', 'üôÇ', 'üòä', 'üôÉ'],
        'heart': ['üòä', 'üíï', 'üíñ', 'üíï', 'üòä'],
        'sleeping': ['üòä', 'üò™', 'üò¥', 'üí§'],
        'healing': ['ü§í', 'üíä', 'üíâ', 'üòä'],
        'sparkle': ['üòä', '‚ú®', 'üåü', '‚ú®', 'üòä'],
        'dance': ['üï∫', 'üíÉ', 'üï∫', 'üíÉ'],
        'jump': ['üòä', '‚¨ÜÔ∏è', 'üòÑ', '‚¨áÔ∏è', 'üòä'],
        'wink': ['üòä', 'üòâ', 'üòä', 'üòú']
    }
    
    def __init__(self, theme: str = "emoji"):
        """
        Initialize the sprite manager.
        
        Args:
            theme: Visual theme ('emoji', 'ascii', or custom)
        """
        self.theme = theme
        self.custom_sprites: Dict[str, List[str]] = {}
        self.custom_animations: Dict[str, List[str]] = {}
        
        # Select appropriate sprite set
        if theme == "emoji":
            self.sprites = self.EMOJI_SPRITES.copy()
        elif theme == "ascii":
            self.sprites = self.ASCII_SPRITES.copy()
        else:
            # Start with emoji as default for custom themes
            self.sprites = self.EMOJI_SPRITES.copy()
    
    def get_sprite(self, mood: str, variation: Optional[int] = None) -> str:
        """
        Get a sprite for the specified mood.
        
        Args:
            mood: The mood/state to get sprite for
            variation: Optional specific variation index
        
        Returns:
            String representation of the sprite
        """
        # Check custom sprites first
        if mood in self.custom_sprites:
            sprite_list = self.custom_sprites[mood]
        elif mood in self.sprites:
            sprite_list = self.sprites[mood]
        else:
            # Fallback to neutral if mood not found
            sprite_list = self.sprites.get('neutral', ['?'])
        
        if not sprite_list:
            return '?'
        
        # Select variation
        if variation is not None:
            index = variation % len(sprite_list)
        else:
            # Random variation for variety
            index = random.randint(0, len(sprite_list) - 1)
        
        return sprite_list[index]
    
    def register_sprite(self, mood: str, sprites: List[str]) -> None:
        """
        Register custom sprites for a mood.
        
        Args:
            mood: The mood to register sprites for
            sprites: List of sprite strings
        """
        self.custom_sprites[mood] = sprites
    
    def register_animation(self, action: str, frames: List[str]) -> None:
        """
        Register a custom animation sequence.
        
        Args:
            action: The action name
            frames: List of animation frame strings
        """
        self.custom_animations[action] = frames
    
    def get_animation(self, action: str) -> List[str]:
        """
        Get animation frames for an action.
        
        Args:
            action: The action to animate
        
        Returns:
            List of animation frame strings
        """
        # Check custom animations first
        if action in self.custom_animations:
            return self.custom_animations[action]
        elif action in self.ANIMATIONS:
            return self.ANIMATIONS[action]
        else:
            # Default simple animation
            return []
    
    def set_theme(self, theme: str) -> None:
        """
        Change the sprite theme.
        
        Args:
            theme: New theme name ('emoji', 'ascii', or custom)
        """
        self.theme = theme
        
        if theme == "emoji":
            self.sprites = self.EMOJI_SPRITES.copy()
        elif theme == "ascii":
            self.sprites = self.ASCII_SPRITES.copy()
        
        # Preserve custom sprites
        self.sprites.update(self.custom_sprites)
    
    def add_mood(self, mood: str, sprites: List[str]) -> None:
        """
        Add a new mood with sprites.
        
        Args:
            mood: New mood name
            sprites: List of sprites for the mood
        """
        self.sprites[mood] = sprites
    
    def get_available_moods(self) -> List[str]:
        """
        Get list of available moods.
        
        Returns:
            List of mood names
        """
        all_moods = set(self.sprites.keys())
        all_moods.update(self.custom_sprites.keys())
        return sorted(list(all_moods))
    
    def get_available_animations(self) -> List[str]:
        """
        Get list of available animations.
        
        Returns:
            List of animation names
        """
        all_animations = set(self.ANIMATIONS.keys())
        all_animations.update(self.custom_animations.keys())
        return sorted(list(all_animations))


class ThemePresets:
    """Predefined sprite themes for different styles."""
    
    RETRO_GAMING = {
        'happy': ['(^o^)', '\\(^_^)/', 'o(^‚ñΩ^)o'],
        'sad': ['(T_T)', '(;_;)', '(ToT)'],
        'hungry': ['(@_@)', '(>_<)', '(o_O)'],
        'sleepy': ['(-_-)zzz', '(-.-)Zzz', '(=_=)'],
        'sick': ['(x_x)', '(@_@)', '(+_+)'],
        'dead': ['[x_x]', '[X_X]', '(‚úñ_‚úñ)']
    }
    
    KAWAII = {
        'happy': ['(‚ó° ‚Äø ‚ó°)', '(¬¥ÔΩ°‚Ä¢ ·µï ‚Ä¢ÔΩ°`)', '(Ôæâ‚óï„ÉÆ‚óï)Ôæâ*:ÔΩ•Ôæü‚úß'],
        'sad': ['(ÔΩ°‚Ä¢ÃÅÔ∏ø‚Ä¢ÃÄÔΩ°)', '(„Å£ÀòÃ©‚ï≠‚ïÆÀòÃ©)„Å£', '(ÔΩ°≈èÔπè≈è)'],
        'hungry': ['(ÔΩ°‚ô•‚Äø‚ô•ÔΩ°)', '(ÔΩ°ÔΩ•œâÔΩ•ÔΩ°)', '(„Å£Àò⁄°ÀòœÇ)'],
        'sleepy': ['(ÔΩ°-œâ-)zzz', '(ÔºçœâÔºç) zzZ', '(_ _).ÔΩ°o‚óã'],
        'sick': ['(ÔΩ°>Ôπè<ÔΩ°)', '(√ó_√ó)', '(ÔΩ°‚Ä¢ÃÅÔ∏ø‚Ä¢ÃÄÔΩ°)'],
        'dead': ['(‚úñ‚ï≠‚ïÆ‚úñ)', '‚úù(‚ñÄÃøƒπÃØ‚ñÄÃø Ãø)‚úù', '(“Ç‚ó°_‚ó°)']
    }
    
    MINIMALIST = {
        'happy': [':)', ':D', 'c:'],
        'sad': [':(', 'D:', ':c'],
        'hungry': [':o', ':O', 'o:'],
        'sleepy': ['-_-', 'z_z', '._. '],
        'sick': [':/', ':|', ':\\'],
        'dead': ['x_x', 'X_X', '*_*']
    }
    
    @classmethod
    def get_theme(cls, name: str) -> Dict[str, List[str]]:
        """
        Get a predefined theme by name.
        
        Args:
            name: Theme name
        
        Returns:
            Dictionary of mood to sprite lists
        """
        themes = {
            'retro': cls.RETRO_GAMING,
            'kawaii': cls.KAWAII,
            'minimal': cls.MINIMALIST
        }
        return themes.get(name, {})